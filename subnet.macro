/*	$Id: subnet.macro,v 1.9 1999/09/02 21:51:40 dim Exp $	
 *
 * $RelId: DM40, subnet. Version 1.3 (#1) Sep 06 18:28:52 CEST 1999 $
 * 
 * BESKRIVELSE: Makro definitioner til subnet-implementationen.
 * 
 * Steffen Schmidt.
 */

#ifndef _SUBNET_M_
#define _SUBNET_M_

#include "network.macro"

/*
 * Konstanter
 */
#define YES             1
#define NO              0
#define STOPPING        -1
#define NONE            0
#define FAIL            -1
#define SUCCES          0
#define MORE            1
#define CONTROL         0
#define RECEIVER        1

#define NUMOFSOCKETS    (MAXSTATION + 1)
#define SYSTEMTHREADS   5             /* antal threads der tilhører systemet    */
#define MAXEVENTNO      ((sizeof(long int) * 8) - 1) /* hoejeste event nummer   */
#define STACKSIZE       65536         /* stak størrelse for de enkelte threads  */
#define INDATALIMIT     20            /* hvor meget data kan ind-bufferen holde */
#define YIELDLIMIT      5             /* tvunget processkift i errortimer       */
#define MULTIPLELIMIT   1             /* hvor mange gange må en pakke dubleres  */
#define WINSIZE         8             /* vinduestørrelse for sekvensnumre       */

/*
 * Forhold til beregning af fejlfrekvenser
 */
#define LOOSERATIO      66
#define DELAYRATIO      44
#define MULTIPLERATIO   22
#define RATIO           (LOOSERATIO + DELAYRATIO + MULTIPLERATIO)

/*
 * Grænser for forsinkelse af datapakker (talt i processkift).
 * For optimal spredning af tilfældige tal, så
 * vælg max og min så det opfylder (DELAYCNTMAX - DELAYCNTMIN) = 2^n - 1.
 */
#define DELAYCNTMAX     17         /* 17 - 2 = 15 = 2^4 - 1 */
#define DELAYCNTMIN     2

/*
 * Maximal total forsinkelse kan regnes ud som:
 * DELAYCNTMAX * (MULTIPLELIMIT + 1) * YIELDLIMIT
 *
 * Dette antal betegner også det antal pakker der max. kan overføres fra for-
 * sinkelseskøen på en gang. Dette kaldldes 'ERRORTRANSFMAX' og bestemmer en
 * array størrelse i 'errortimer'
 */
#define ERRORTRANSFMAX   (DELAYCNTMAX * (MULTIPLELIMIT + 1) * YIELDLIMIT)

/*
 * Til låse omkring kritiske regioner.
 */
#define LOCK( l, s ) if( pthread_mutex_lock( l )) perror(#s " locking " #l);
#define UNLOCK( l, s ) if( pthread_mutex_unlock( l )) perror(#s " un-locking " #l);

/*
 * logger information på den ønskede måde
 */
#define LOGINFO( info, size )                                        \
{ if ( LogStyle == separate ) Log( GC.logbuffer, info, size );       \
  if ( LogStyle == synchronized ) SyncLog( info, size );}

/*
 * Undersøger om stationen er klar
 */
#define SYSTEMOK( func )                                             \
{ LOCK( &SC.systemlock, func );                                      \
  if (SC.ready != YES)                                               \
    pthread_cond_wait( &SC.systemsignal, &SC.systemlock );           \
  UNLOCK( &SC.systemlock, func );}

#endif
